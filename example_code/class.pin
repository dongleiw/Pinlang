class Foo{
	id int;
	name str;
	skills []str;
	records [][]int;

	fn GetId() int{
		return this.id+3;
	}
	fn Print(){
		var i = this.GetId()+100;
		printf("method Print: id={} i={} name={} skills={} records={}\n", this.id, i, this.name, this.skills, this.records);
	}

	fn Get{
		[T ToString](a T) str {
			return a.tostring();
		}
	}

	impl constraint ToString{
		fn tostring() str{
			return "id=" + this.id.tostring() + " name=" + this.name;
		}
	}

	impl constraint Add[Foo,Foo]{
		fn add(another Foo) Foo{
			//this.id = this.id + another.id;
			var tmp = Foo{
				id: this.id + another.id,
				name: this.name + another.name, 
			};
			return tmp;
		}
	}
}

fn test1(){
	printf("############### call method \n");

	var foo Foo;
	printf("foo.Get(1)={}\n", foo.Get(1));
	printf("foo.Get(\"hes\")={}\n", foo.Get("hes"));
	var q = foo.Print;
	q();

	printf("\n");
}


// 初始化表达式
fn test2(){
	printf("############### initial expr\n");

	var foo = Foo{
        id: 33,
        name: "dl",
        skills: []str{"sleep", "eat"},
        records: [][]int{ 
            []int{1,2,3},
            {4,5,6}
        }
    };
	foo.Print();

	printf("\n");
}

// 约束
fn test3(){
	printf("############### constraint\n");

	var foo = Foo{
        id: 99,
        name: "yes",
    };
	printf("tostring: {}\n", foo.tostring());

	fn print[T ToString](a T){
		printf("generic function print: T[{}] a[{}]\n", T, a);
	}
	print(1);
	print(foo);

	printf("\n");
}

// 泛型约束
fn test4(){
	printf("############### generic constraint\n");
	var foo1 = Foo{
        id: 99,
        name: "yes",
    };
	var foo2 = Foo{
        id: 1,
        name: "yes",
    };
	printf("foo1= {}\n", foo1.tostring());
	printf("foo2= {}\n", foo2.tostring());
	printf("foo1+foo2={}\n", foo1+foo2);

	printf("\n");
}

// 函数内使用
fn test5(){
	printf("############### in function\n");
	fn zzz(){
		var f = Foo{
			id: 33,
        	name: "dl",
		};
		f.Print();
	}
	zzz();
	printf("\n");
}

fn main(args []str)int{
	test1();
	test2();
	test3();
	test4();
	test5();

	return 0;
}
