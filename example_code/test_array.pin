//数组

// 一维数组
fn test1() i32{
	var array = [2]i32{1,2};  // array.rtype = [2]i32

	assert(array[0]==1);
	assert(array[1]==2);

	// 指向整个数组的指针
	{
		var ptr_to_array = &array; // p.rtype = *[2]i32

		var a = (*ptr_to_array)[0]; // a.ltype = i32
		assert( a == 1 );
		a = 10;
		assert( array[0] == 1);

		var b = ptr_to_array[0]; // b.ltype = [2]i32; d is a copy of array
		b[1]=20;
		assert( array[1] == 2);
	}

	// 指向数组元素的指针
	{
		var ptr_to_element = &(array[0]); // ptr_to_element.rtype = *i32
		assert( *ptr_to_element == 1 );
		*ptr_to_element = 10;
		assert( array[0] == 10);
	}

	return 0;
}
// 指向二维数组的指针
fn test2() i32{
	// array.rtype = [2][3]i32
	// array.ltype = *[2][3]i32
	var array = [2][3]i32{ {1,2,3}, {4,5,6} };  

	// ptr_to_array.rtype = `&array`.rtype = array.ltype = *[2][3]i32
	var ptr_to_array = &array; 

	var e1 = (*ptr_to_array)[0]; // e1.ltype = [3]i32; e1 is a copy of array[0]
	assert(e1[0] == 1);
	e1[0]=100;
	assert(array[0][0] == 1);

	var e2 = ptr_to_array[0]; // e2.ltype = [2][3]i32; e2 is a copy of array
	e2[0][0]=100;
	assert(array[0][0]==1);

	// `ptr_to_array[0]`.rtype = [2][3]i32
	ptr_to_array[0][0][0]=10;
	assert(array[0][0]==10);

	// `*ptr_to_array`.rtype = (-*) ptr_to_array.rtype = [2][3]i32
	(*ptr_to_array)[0][0]=11;
	assert(array[0][0]==11);

	return 0;
}
// 指向二维数组的第二维的指针
fn test3() i32{
	// array.rtype = [2][3]i32
	// array.ltype = *[2][3]i32
	var array = [2][3]i32{ {1,2,3}, {4,5,6} };  

	var ptr_to_dimension_2 = &(array[1]); // ptr_to_dimension_2.ltype = *[3]i32

	var e3 = ptr_to_dimension_2[0]; // e3.ltype = [3]i32
	assert(e3[2]==6);

	(*ptr_to_dimension_2)[0]=10;
	assert( array[1][0] == 10);

	// `ptr_to_dimension_2[0]`.rtype = [3]i32
	ptr_to_dimension_2[0][1]=40; 
	assert( array[1][1]==40 );

	return 0;
}

// 指向二维数据的元素的指针
fn test4() i32{
	// array.rtype = [2][3]i32
	// array.ltype = *[2][3]i32
	var array = [2][3]i32{ {1,2,3}, {4,5,6} };  

	// `array[0]`.rtype = [3]i32
	// `&(array[0][0])`.rtype = `array[0][0]`.ltype = *i32
	var ptr_to_element = &(array[0][2]);
	*ptr_to_element = 100;
	assert( array[0][2]==100 );
	assert( *ptr_to_element==100 );

	var p2 = ptr_to_element;
	*p2 = 200;
	assert( array[0][2]==200 );
	assert( *ptr_to_element==200 );
	assert( *p2==200 );

	return 0;
}

fn main() i32 {
	test1();
	test2();
	test3();
	test4();
	return 0;
}
