// 变量定义
{
	printf("###### var definition\n");
	var t_int type = int;
	printf("t_int = %s\n", t_int);

	var t_float = float;
	printf("t_float = %s\n", t_float);

	var i = (3+5-4)*3/2;
	printf("i = %d\n", i);

	var f = (5.0+1.3) - (3.3-1.1) + (4.1/2.0);
	printf("f = %.5f\n", f);

	var s = "hello" + " " + "world";
	printf("s = %s\n", s);
}

// 函数定义&调用
{
	printf("###### function definition & call\n");
	fn f1()int{
		var i=1;
		return i;
	}
	fn f2(a int)int{
		return a+1;
	}
	fn f3(a int)type{
		return int;
	}
	fn f4(a int, b int) int{
		return a+b;
	}
	fn f5(a int, b int) {
		printf("call f5: a=%d\n", a);
	}

	var r1 = f1();
	var r2 = f2(1);
	var r3 = f3(1);
	var r4 = f4(99,100);
	f5(99,100);
}

// 函数重载
{
	printf("###### function overload\n");
	fn f(){
	}
	fn f(a int)int{
		return a+1;
	}
	fn f(a int, b int)int{
		return a+b;
	}

	f();
	var r2 = f(1);
	var r3 = f(1, 2);
}

// 泛型函数
{
	// 定义泛型函数
	fn gsum[T Add[T,T]](a T, b T) T{
		return a+b;
	}
	
	// 调用泛型函数, 显式指定泛参
	{
		printf("call generic function with gparams: result=%d\n", gsum[int](10,25));
	}
	
	// 调用泛型函数, 自动推导泛参
	{
		var si = gsum(1, 2);
		var sf = gsum(1.1, 2.3);
		var ss = gsum("hello", "world");
	}
	
	// 获取对应函数实例
	{
		var fi = gsum[int];
		var ff fn(float,float)float = gsum;
		var fs fn(str,str)str = gsum[str];

		var rfi = fi(1,2);
		var rff = ff(9.1, 10.3);
		var rfs = fs("yes", "ok");
	}
}
