// 一维数组
fn test1(){
	var a1 = []int{1,2};
	printf("a1={}\n", a1);
	printf("a1[0]={}\n", a1[0]);
}

// 二维数组
fn test2(){
	var a2 = [][]int{ []int{1,2},  []int{3,4} };
	printf("a2={}\n", a2);
	printf("a2[0][0] + a2[0][1]={}\n", a2[0][0] + a2[0][1]);
}

// 三维数组
fn test3(){
	printf("a3={}\n", [][][]int{ 
		[][]int{
			[]int{1,2},
			[]int{3,4},
		},
		[][]int{
			[]int{5,6},
			[]int{7,8},
		}
	});
}

// 数组元素是tuple
fn test4(){
	var a=[](int,str){
		(1,"hello"),
		(2,"yes")
	};
	printf("a={}\n", a);
}

// 缺省类型
fn test5(){
	var a = [][]int{
		[]int{1,2,3},
		{4,5,6}
	};
	printf("a={}\n", a);
}

// 数组元素求和
fn test6(){
	fn sum(array []int)int{
		var s=0;
		for var i=0; i<array.Size(); i=i+1{
			s = s+array[i];	
		}
		return s;
	}
	printf("sum={}\n", sum( []int{1,2,3,4,5} ) );
}

fn main(args []str)int{
	test1();
	test2();
	test3();
	test4();
	test5();
	test6();

	return 0;
}
