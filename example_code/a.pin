 fn print[T ToString](fmt str, a T){
 	printf(fmt, a.tostring());
 }

// fn print{
//	[T ToString](fmt str, a T){
// 		printf(fmt, a.tostring());
// 	}
//	[T ToString](fmt str, a T, b T){
// 		printf(fmt, a.tostring(), b.tostring());
// 	}
//	[T ToString](fmt str, a T, b T, c T){
// 		printf(fmt, a.tostring(), b.tostring());
// 	}
//	[T ToString](fmt str, a T, b T, c T, d T){
//		if(T==float){
//		}
// 		printf(fmt, a.tostring(), b.tostring());
// 	}
// }

print("int %s\n", 1);
print("float %s\n", 1.3);
print("str %s\n", "hello");

// 泛型函数
{
	// 定义泛型函数
	fn gsum[T Add[T,T]](a T, b T) T{
		return a+b;
	}
	// 获取对应函数实例
	{
		var fs fn(str,str)str = gsum[str];

		var rfs = fs("yes", "ok");
	}
}
