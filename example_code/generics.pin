fn test1(){
	fn simple_fn(a int, b int) int{
		return a+b;
	}
	printf("simple_fn(1,2)={}\n", simple_fn(1,2));
}

fn test2(){
	fn generic_fn[T Add[T,T]](a T, b T) T{
		return a+b;
	}
	printf("generic_fn(1,2)={}\n", generic_fn(1,2));
	printf("generic_fn(1.3,2.9)={}\n", generic_fn(1.3,2.9));
}

fn test3(){
	fn complex_fn{
		(a int)int{ return a; }
		(a float)str{ return "float spec"; }
		[T Add[T,T]](a T, b T)T{ return a+b; }
		[T Add[T,T]](a T, b T, c T)T{ return a+b+c; }
	}
	printf("complex_fn(1)={}\n", complex_fn(1));
	printf("complex_fn(1,2)={}\n", complex_fn(1,2));
	printf("complex_fn(1,2,3)={}\n", complex_fn(1,2,3));
	printf("complex_fn(1.1)={}\n", complex_fn(1.1));
	printf("complex_fn(1.3,2.4)={}\n", complex_fn(1.3,2.4));
	printf("complex_fn(1.9,2.1,3.03)={}\n", complex_fn(1.9,2.1,3.03));
}


fn test4(){
	fn foo[E Add[E,E]](a1 []E, a2 [][]E){
		printf("a1={}\n", a1);
		printf("a2={}\n", a2);
	}
	foo([]int{1,2}, [][]int{ []int{1,2},  []int{3,4} });
}

fn main(args []str)int{
	test1();
	test2();
	test3();
	test4();

	return 0;
}
