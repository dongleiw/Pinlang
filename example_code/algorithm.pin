// 字符串是否相等
{
	fn is_str_equal(a str, b str)bool{
		if a.Size() != b.Size(){
			return false;
		}
		for var i=0; i<a.Size(); i=i+1{
			if a[i] != b[i]{
				return false;
			}
		}
		return true;
	}
	var a="hello";
	var b="hello";
	printf("a[{}] b[{}]: {}\n", a, b, is_str_equal(a, b));
}

// 是否包含子串
{
	fn contains_substr(s str, sub str)bool{
		if s.Size()<sub.Size(){
			return false;
		}
		for var i=0;i<s.Size()-sub.Size();i=i+1{
			var equal=true;
			for var j=0; j<sub.Size(); j=j+1{
				if s[i+j]!=sub[j]{
					equal=false;
					// break; // 还不支持break
				}
			}
			if equal{
				return true;
			}
		}
		return false;
	}
	var s="hello";
	var sub="ll";
	printf("string[{}] substr[{}]: {}\n", s, sub, contains_substr(s, sub));
}

// 冒泡排序
{
	fn sort(array []int){
		for var i=array.Size(); i>0; i=i-1{
			for var j=1; j<i; j=j+1{
				if array[j-1] > array[j]{
					//printf("array[{}]={} <==> array[{}]={}\n", j-1, array[j-1], j, array[j]);
					var tmp = array[j-1];
					array[j-1] = array[j];
					array[j] = tmp;
				}
			}
			printf("i={} array={}\n", i, array);
		}
	}
	
	var array = []int{9,2,5,2,3,1,6};
	printf("before sort={}\n", array);
	sort(array);
	printf("after sort={}\n", array);
}

// 冒泡排序(泛型)
{
	printf("########### bubble sort\n");

	fn sort[T GreaterThan[T]](array []T){
		for var i=array.Size(); i>0; i=i-1{
			for var j=1; j<i; j=j+1{
				if array[j-1] > array[j]{
					var tmp = array[j-1];
					array[j-1] = array[j];
					array[j] = tmp;
				}
			}
		}
	}
	
	var array_int = []int{9,2,5,2,3,1,6};
	printf("before sort={}\n", array_int);
	sort(array_int);
	printf("after sort={}\n", array_int);

	var array_float = []float{9.2,2.3,5.3,2.9,3.4,1.0,6.6};
	printf("before sort={}\n", array_float);
	sort(array_float);
	printf("after sort={}\n", array_float);
}
