变量

变量的值的类型:
	假如有赋值语句: src = dst;

	值类型
		type,int,float,bool,str类型的变量是值类型.
		值类型在赋值时, src会得到dst的值的一份拷贝
	引用类型
		fn,array,class,tuple类型的变量是引用类型.
		引用类型在赋值时, src将指向dst指向的值


变量的依赖顺序问题
	问题说明
		1. 函数不能严格的先定义后使用. 比如以下代码, foo和bar相互调用, 如果要遵循严格的先定义后调用, 那么就无法定义这种函数
			fn foo(i i32){
			    if(i<0){
			        return;
			    }
			    if(i%2==1){
			        bar(i-1);
			    }
			}
			fn bar(i i32){
			    if(i%2==0){
			        foo(i-1);
			    }
			}
		2. 全局变量定义的顺序可能需要重新排序
				var a=b+1; // 文件A
				var b=1; // 文件B
			两个文件分别定义一个全局变量, 变量a的初始化依赖与变量b. 
	如何处理
		处理顺序:
			先把所有文件的所有global处理完后, 再处理剩下的
			global变量只能依赖global变量/函数/类.
			全局变量可以"先使用后定义". 非全局变量的顺序必须严格"先定义后使用". 函数定义可以"先使用后定义"
		全局block:
			全局block会分散在多个文件中, 导致没有顺序是不确定的. 需要特殊处理
			1. 先收集所有文件的所有全局变量定义, 全局函数定义, class定义. 得到一个名字到astnode的字典
			2. 按照文件内的顺序校验(不同文件的校验顺序可以随意). 当发现一个identifier不存在时, 从global-block中查找
				如果找不到则说明该identifier未定义.
				如果找到了则说明出现了依赖顺序问题. 跳转到该astnode的校验. 然后再继续当前node校验. 如果依然找不到, 则失败
				
			对于上面的函数相互调用的情况, 上述逻辑依然不能解决. 需要在verify function body之前, 将函数名定义到vt中
		非全局block:
			非全局block不能跨文件, 顺序是固定的. 但是由于存在函数相互调用的情况, 因此函数的引用依然需要特殊处理
			1. 收集该block的所有函数定义
			2. 先做预处理, 将函数名字和类型信息加入vt. 
			3. 然后按照顺序检查代码

