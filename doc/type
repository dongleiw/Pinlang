类型

分类:
	内置基础类型
		type
		i32
		i64
		float
		str
		bool
	基础类型组合得到的复合类型
		class
		tuple
		array
	值类型和引用类型
		值类型(value type):
			type, i32, i64, float, bool都是值类型
		引用类型(reference type):
			str class tuple array
		区别:
			值类型的变量的内容为值, 而引用类型的值是一个指向真正的数据内存地址的指针
			赋值区别:
				a = b;
				假如a/b是值类型, 那么a会得到b的值的一份拷贝(数据相同, 内存地址不同)
				假如a/b是引用类型, 那么a会指向b指向的数据(内存地址相同, 数据自然也相同)
				值类型的变量在赋值时, 目标变量获得到源变量的值的一份拷贝. 而引用类型的变量在赋值时, 目标
			将一个类型定义为值类型还是引用类型的依据是什么? 为什么不都设置为值类型(引用类型)?
	指针类型
		*T 其中T是任意类型. 值为一个内存地址, 该内存地址中存放了一个类型为T的值
	
		例子:
			- *i32 内存地址中存放了一个类型为i32的值
			- *[3]i32 内存地址中存放了一个类型为[3]i32的值
			- **i32 内存地址中存放了一个类型为*i32的值
			- null 常量, 空指针. T为任意类型
				
		*T 和乘积的语义冲突问题:
			var a *T = &b;
			var b = i*j;


特殊类型type:
	将类型当作值(该值的类型是type)
		比如int是一个variable, 类型是type, 值是TYPE_ID_INT
	将类型视作值后, 类型本身也可以参与运算, 进行传递, 比如:
		1. 类型别名
			const StudentId = int;
			StudentId是一个类型, 该类型的值是int. 


	
各类型的默认值:
	type	none
	i32		0
	i64		0
	float	0.0
	bool	false
	str		""
	[]T		[]T{}

各类型的内存大小:
	type	4
	i32		4
	int		4
	i64		8
	float	4
	bool	1
	str		8 (pointer)
	[]T		8 (pointer)
	class	8 (pointer)
