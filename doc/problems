1. 泛型函数verify和execute类型不一致问题
	问题:
		为了verify泛型函数的定义, 一开始的方法是构造一些虚拟的类型, 将约束内容添加到这些类型中, 使之满足约束限定.
		然后用这些虚拟类型来verify泛型函数的body, 将verify的结果暂存用于execute 
		看着似乎没什么问题. 

		后来加入了对类型属性访问的语法, 在verify这种语法时, 会将属性名转换为attribute列表中的index. 在execute阶段使用该index来访问属性.
		这对于普通函数没啥问题. 但是对于泛型函数就有大问题了. 虚拟类型和实际类型的属性列表可能不同, 导致verify得到的attribute-index是错的

		为了解决这个问题, 将attribute-index修改为一个组合: constraint的类型id 以及该constraint下的方法index.
		但是这种方法依然不行. 因为虚拟类型生成的constraint的类型id和实际类型生成的类型id是不同的, 运行时会找不到对应constraint

	分析:
		看起来单纯的用虚拟泛参verify泛型函数的定义是不够的. 需要在泛型函数调用的时候也要做一些处理. 
		假如在泛型函数调用的时候直接以实际泛参来verify泛型函数那? 这样应该是可以解决, 但是这样处理就和隐式声明约束(比如C++中的模板)一样了. 
		我还是期望能够将泛型函数定义的verify独立出来. 在泛型函数调用的时候只需要校验实际泛参是否满足约束.

		另外还引出了以下几个问题:
			为什么要将verify阶段的信息保留给execute阶段? 要保留哪些信息?

	解决:
		目前解决办法: 
			在泛型函数实例化时, 通过深拷贝得到函数ast子树的副本, 该副本针对实例化的类型进行verify. 这样就和函数调用时的类型对应上了. 不会出错
		该解决办法的缺陷:
			每次实例化都需要克隆一个副本. 代码会膨胀.
			每次实例化都需要verify一遍副本的函数体. 明明已经使用虚拟的泛参进行了verify. 这个缺陷不能接受!
				但是对泛型函数实例再次verify也是有好处的, 可以在这里做compile-time compute. 比如代码中的一些false分支可以优化掉

2. 为什么要将verify阶段的信息保留给execute阶段? 要保留哪些信息?
	需要明确定义verify阶段的处理内容:
		语法检查
		类型检查 
		类型推导, 重载函数选择
		泛型实例化 
		编译期计算
		编译期优化

3. 函数重载, named parameter, 泛型函数三者之间的混用有一些问题
	当三者混用时, 需要一个规则来选择具体实现. 规则比较复杂可能会影响可读性. C++中还有隐式类型转换, 这个问题更加严重
	如何定义一个清晰简单的规则来让三者兼容? 

4. Explicitness VS inference
	Explicitness和inference似乎是冲突的, 如何在两者之间保持平衡

5. 泛型特化
	一开始我计划是将泛参作为type类型的变量暴露到泛型函数内部, 然后可以根据T的具体类型进行特化处理. 例如以下代码:
		fn foo[T ToString](a T){
			printf("T={}\n", T);
			if(T == int){
				// 分支1
			}else{
				// 分支2
			}
		}
	当T是int时, 走分支1, 分支2则删除掉. 反正则走分支2. 看着没什么问题对吧.

	在实现了泛型函数内部访问泛参以后, 我准备开始实现编译期常量表达式, 以便在编译阶段可以决定分支选择. 这个时候我才突然意识到这个设计的问题. 
	T需要遵循ToString的约束, 这导致T只能使用ToString中定义的接口, 而无法使用int特有的接口. 比如int支持位操作, 但是由于ToString没有, 导致foo函数内部无法进行位操作.

	怎么解决?
		想法1:
			去掉泛参的约束限定. 改为和C++的template类似的, 将泛参的约束隐藏到泛型函数体内. 
			否决. 约束不能舍弃. C++都在增加Concept, 没理由倒退
		想法2: 保留泛参的约束限定. 增加功能: 可以在泛型函数体内做泛参的具体类型限定
				fn foo[T ToString](a T){
					if(T==int){
						// 编译期, 自动识别出这种形式, 然后在检查if的body时, 将T设定为满足ToString限定且T是int
					}else{
						// 编译期, 自动识别出这种形式, 然后在检查if的body时, 将T设定为满足ToString限定且T不是int
					}
				}
			相当于是: 
				泛参的约束拆分为了两部分. 
					一部分是在泛参声明时指定的约束
						只要泛参的实际参数满足约束, 那么一定可以调用该函数. 
					一部分是在函数体内.
						可以使用特殊语法检测泛参是否是某个具体类型, 比如T是否是concrete_type. concrete_type必须满足泛参声明的约束.
						这样就可以针对不同的类型执行不同的代码. 并且可以动态

				这导致泛型函数定义本身是无法进行检查的. 这里引出一个核心问题: 为什么一定要在泛型定义的位置进行检查?
				似乎"在泛型定义位置检查" 和 "泛型函数内部特化"两者之间有无法调和的冲突


			优点:
				和想法3相比, 优势在于可以进一步复用代码逻辑
				和想法3相比, 不需要定义复杂的overloading rule. 比较好理解
			缺点:
				编译器不太好判断用户的意图, 是普通的分支, 还是用户想限定T的类型
			具体设计:
				1. 增加一个标识
					if(___generic_enhanced__ T==int){
						// T增加约束: T是int
					}
				2. 自动识别
					if(generic_enhanced_expr){ 
						// T增加约束: T是int
					}else{  
						// T不是int
					}
					generic_enhanced_expr必须是编译期常量表达式, 且形式必须是T==concrete_type或者是concrete_type==T
					当满足上述条件时, 编译器会在if的body内将T更改为concrete_type
					如果不满足上述条件怎么处理? 比如下面情况
						if(T!=int){}
						if(T==int || T==float){}
						if(T==int && F==float){}
		想法3: 增加独立的特化语法:
			fn foo{
				[T ToString](a T){}
				[T int](a T){} // 将类型T限定为int, int是一个具体类型. 当泛型函数实例化int版本时, 选择这个版本
			}
			fn foo{
				[T ToString](a T){}
				(a int){}  // 或者省去泛参的声明. 直接定义一个新函数. 当非泛型函数和泛型函数同时满足时, 非泛型函数优先级更高
			}
			缺点:
				需要定义一个重载的规则. 比如非泛型函数优先级高于泛型函数. 不太好理解. 而且编译器实现这个规则也相对比较复杂
			优点:
				似乎没有优点
				
6. 变量和类型的作用域定义不清晰
	目前类型是通过类型为type的编译期常量来描述的. 所以类型的作用域和变量是相同的.
	明确定义变量的作用域:
		???

7. 实现约束 '下标访问'引发的问题
	最开始是只有数组提供下标访问功能, 所以并没有通过约束的方式提供, 而是直接编译器实现. 后来遇到str类型也需要提供下标访问, 所以考虑通过约束实现. 
	这里发现一个问题
		下标访问的约束定义大概如下:
			constraint Index[ReturnT]{
				fn index(idx int) ReturnT;
			}

		假设编译器要处理`id[3]`, 并且假设id的类型为idt.
		编译器需要检查idt是否实现了约束Index[ReturnT], 所以我们需要先知道ReturnT的实际类型. 而想确定ReturnT的类型, 就需要找出idt实现了哪个Index约束. 循环依赖了

		当然这个循环依赖并不是不能解决. 
			一个方法是先检查idt是否实现了名为Index的约束. 如果没有实现则语法错误. 如果实现了, 再获取ReturnT的类型. 这个解决方法要求一个类型最多只能实现一个Index约束
	Rust的解决方法:
		提供PlaceHolder types (https://doc.rust-lang.org/book/ch19-03-advanced-traits.html)
		PlaceHolder types的作用并不是这个, 但是确实解决(绕过)了这个问题

	受Rust启发, 一个思路是将约束的泛参隐藏到约束的内部, 比如:
			constraint Index[ReturnT]{
				fn index(idx int) ReturnT;
			}
		上述代码中, ReturnT通过约束的泛参暴露给了使用者, 导致使用者必须确认ReturnT的实际类型. 对应上面遇到的问题, 也就是编译器在检查`id[3]`代码时不得不先确认ReturnT的类型.

		那么如果将ReturnT隐藏到约束内部那?
			// Index不再保留ReturnT. 对于使用者来说, Index不再是一个泛型约束
			constraint Index{
				fn index(idx int) ReturnT;
			}

			class Foo{
				// Foo实现约束了Index. 通过这个实现, 可以推导出ReturnT的实际类型为int
				impl constraint Index{
					fn index(idx int) int;
				}
			}

		由于Index不再是一个泛型约束, 当需要检查类型Foo是否实现了约束Index时, 就不再需要实例化了.

	这里又引出一个新的问题, 如果是这样的话, 那为什么还需要<泛型约束>. 直接把约束的所有泛参都隐藏起来不是更简单?
		这个问题说明我之前对<泛型约束>的理解不够透彻. 
		通过这个问题, 我觉得<泛型约束>的目的应该是提供一种方式, 让一个类型可以实现多个名字相同泛参不同的约束

		下面代码中, Foo实现了两个约束Add, 区别是T类型不同
			constraint Add{
				fn add(t T); // T被隐藏
			}
			class Foo{
				// 实现约束Add, 类型T为int
				impl constraint Add{
					fn add(t int);
				}
				// 实现约束Add, 类型T为float
				impl constraint Add{
					fn add(t float);
				}
			}
		上述语法不够直观不易理解. 更好的方式是下面这种语法. 将T暴露出来
			constraint Add[T]{
				fn add(t T); // T被暴露出来, Add变成了一个泛型
			}
			class Foo{
				// 实现约束Add, 类型T为int
				impl constraint Add[int]{
					fn add(t int);
				}
				// 实现约束Add, 类型T为float
				impl constraint Add[float]{
					fn add(t float);
				}
			}
		总结下:
			约束的类型参数分为两种:
				1. 如果想让使用者可以实现多个该约束, 就作为泛参
				2. 如果不需要实现多个, 就隐藏在约束定义内

8. `type`类型的属性和static方法的歧义问题
	class Foo{
		fn static st_ma(){
		}
	}
	目前访问st_ma方法的语法是: `Foo.st_ma`. 但是这个是有歧义的
	`Foo`的类型是`type`. 而`type`类型有一些自己的方法, 比如TypeName, TypeId, TypeGroupId. 
	因此语法`T.attr_name`有两种解释:
		访问`type`类型的attr_name属性
		访问T类型的attr_name静态方法

	解决方法:
		1. 提供两种语法区分开
			a.b
				假设a的类型为T. 该语法是访问T类型的b属性.
				例如:
					f.id // 访问变量f的属性id
					1.tostring // 访问常量1的方法tostring
					Foo.TypeName // Foo是类型为type的变量. 因此这里访问的是type的方法TypeName
			a::b
				a的类型必须是type, 该type类型存放的类型是T. 该语法访问T类型的静态属性b
				例如:
					Foo::st_ma
	
		2. 类型`type`不在有属性. 提供内置函数get_type_name, get_type_id, get_type_group_id
			a.b
				如果a的类型是`type`:
					a保存的类型是T, 访问T的属性b
				否则:
					a的类型是T
					访问T的属性b
				例如:
					f.id // 访问变量f的属性id
					1.tostring // 访问常量1的方法tostring
					Foo.st_ma // Foo的类型为type, 保存的类型是Foo. 因此这里访问的是Foo的方法st_ma
					
					get_type_name(T) // 获取T的类型名
					get_type_id(T) // 获取T的类型id


			决定选择这种方式: 节省一个语法. 更容易理解
