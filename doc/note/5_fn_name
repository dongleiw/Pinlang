为了支持函数重载和泛型, 函数名中携带泛型类型信息和参数类型信息. 

目前发现一个内嵌函数重名问题

case1:
	fn fa(){
		fn foo(){
		}
	}
	fn fb(){
		fn foo(){
		}
	}
	上述代码中, fa和fb内部各定义了一个名为foo的函数. 在之前的基于ast执行的方案中, 由于可见性不同, 两个同名函数不会冲突(也不构成重载). 但是LLVM IR是一个平面的, 多个同名函数就会出现冲突. 
case2:
	fn fa(){
		{
			fn foo(){}
		}
		{
			fn foo(){}
		}
	}
	不同作用域定义了名字相同的函数. 同样也是合法的, 也需要处理冲突

解决方法:
	1. 如果函数是内嵌函数, 则通过增加后缀的方式避免冲突
	2. 如果不是内嵌函数, 则不允许出现冲突
