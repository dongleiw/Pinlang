函数参数类型的推导和函数匹配
对于简单函数(无重载, 无泛型), 函数的参数类型是明确的. 因此推导顺序是 函数类型 => 实参类型
对于复杂函数(有重载, 有泛型), 函数的参数类型是不明确的. 需要根据实参类型来匹配. 因此推导顺序是 实参类型 => 函数类型

常量的类型:
	常量可以解释为多种类型:
		1 {i8, i16, i32, i64, u8, u16, u32, u64}
		1.5 {f32, f64}
		"hello" {str}
		true {bool}

	常量使用的语法
		1.tostring
			默认类型
		1.5.tostring
			默认类型
		"123".length
			默认类型 str
		foo(1)
		f.get(1+2)
			调用方法

		Str.Alloc(5, "hello")
			调用Str的构造函数
	
	显式指定常量类型:
		1i8 2i32 1024u64
		1.5f32 1.5f64

	规则:
		由于常量可以解释为多种类型, 而复杂函数的参数也可以有多种类型. 为了保持直观, 增加规则:
			使用常量调用复杂函数时, 必须显式指定常量类型
		解释:
			简单函数:
				fn foo(i32, bool){
				}
				foo(1, true) // 由于foo是简单函数, 不存在函数匹配过程. 本身就很直观, 因此1不强制显式指定类型
			复杂函数:
				fn foo{
					(i32, bool){ // A
					}
					(u32, float){ // B
					}
				}
				foo(1, true) // 只有A匹配. 1的类型可以自动推导得到(i32). 但是这种推导不够直观. 因此这里要求1必须显式指定类型. 
				foo(1i32, true)
				foo(1u32, 1.2)

解决方法:
	1. 先检查函数是否是简单函数. 然后根据结果执行不同的推导策略
		问题: 
			导致verify过程比较复杂. 
			<id>() // 
			<id>.<attr>() // 
			<type>.<attr>() // 

	2. 常量可以verify为多个可选类型. 使用这些可选类型进行函数match
		fn_expr(1, f); // 假定f的类型为Foo
		常量`1`类型可以是: {i8, i16, i32, i64, u8, u16, u32, u64}

		verify过程为:
			1. 先verify实参得到参数列表:
				args = [ {i8, i16, i32, i64, u8, u16, u32, u64}, Foo ]
			2. 将args传递给fn_expr进行verify
				假设fn_expr结果为一个简单函数
					类型为: fn(i32, Foo)
					那么最终常量`1`的类型为i32
				假设fn_expr结果为一个复杂函数
					类型是: {
						fn(i32, Foo)
						fn(i64, Foo)
					}
					由于有多个函数实现匹配, 因此无法推导出正确类型. 出错
				假设一个实现也没匹配到, 那么也是出错
		通过这种方式, 将推导顺序统一为 实参类型 => 函数类型
		引入问题:
			导致verify的流程不再是一个顺序的, 而是需要跳转
