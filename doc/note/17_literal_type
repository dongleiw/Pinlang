常量的类型

部分常量可以有多种类型, 比如`100`可以是u8,i8,....类型. 具体选择哪种类型需要根据值的范围以及上下文决定

原则:
	优先遵循直观的原则, 自动调整类型不能损害直观的原则
	筛选所有可能性, 最终必须是有且只有一种类型匹配, 类型转换没有优先级(C++重载匹配规则的优先级引入了混乱)
	literal有合理的默认类型

case
	1. no_literal <operator> literal
		需要首先确定left的类型, 然后根据operator获取对应方法. 如果方法是泛型或者是函数重载, 则失败. 这种情况下需要显式声明常量值的具体类型
		如果方法是简单函数, 则根据参数来决定literal的类型
	2. literal <operator> no_literal
		首先根据值域得到类型集合. 然后遍历该集合中的每一个类型, 获取对应operator对应的方法, 如果方法是泛型或者函数重载, 则失败
		如果是简单函数, 则判断和right类型是否匹配.
		如果最终有多个类型匹配, 则失败. 如果只有一个, 则自动转换为对应类型
	3. literal <operator> literal
		使用literal的默认类型	
