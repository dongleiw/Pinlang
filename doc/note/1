函数的参数类型是[N]T:
	fn foo(a [2]i32){
	}
	由于GEP的第二个参数必须是ptr, 如果数组数据在register中, 无法直接GEP, 需要先store到内存中. (不确定LLVM是否提供类似的方法)
	一个解决办法是将上述函数转换为 foo(a *[2]i32); 在函数调用之前, caller先clone一个临时数组, 然后传递ptr给callee

	一个办法是caller传递指针, callee内部自己来clone. 
	
	发现一个新办法, 可以将类型为[N]T的参数修改为*[N]T, 并且增加byval属性

数组类型的变换:
	方案1:
		fn foo1(a [3]i32){}
		fn foo2(a *[3]i32){}
		fn foo3(a *i32){}

		foo1( [3]i32{1,2,3} ); // ok 类型匹配
		foo2( [3]i32{1,2,3} ); // error 类型不匹配. [3]i32 != *[3]i32
		foo3( [3]i32{1,2,3} ); // ok. 类型不匹配, 但可以自动转换. [3]i32 => *i32

		fn bar1(a [3]char){}
		fn bar2(a *[3]char){}
		fn bar3(a *char){}

		bar1( "hi" ); // ok. "hi" 类型为 [3]char
		bar2( "hi" ); // error. "hi" 类型为 [3]char != *[3]char
		bar3( "hi" ); // ok. "hi" 类型为 [3]char, 可以自动转换为 *char

		根据上述例子可以得出: 
			[N]T => *T // 可以自动转换. 这种转换会丢失数组长度信息N
			*T => [N]T // 无法自动转换
	方案2:
		fn foo1(a [3]i32){}
		fn foo2(a *[3]i32){}
		fn foo3(a *i32){}
		fn foo5(a *[2]i32){}

		foo1( [3]i32{1,2,3} ); // ok 类型匹配
		foo2( [3]i32{1,2,3} ); // error 类型不匹配. [3]i32 != *[3]i32
		foo3( [3]i32{1,2,3} ); // error 类型不匹配. [3]i32 != *i32
		foo3( &([3]i32{1,2,3}[0]) ); // ok 数组第0元素的地址类型为 *i32

		fn bar1(a [3]char){}
		fn bar2(a *[3]char){}
		fn bar3(a *char){}

		bar1( "hi" ); // ok. "hi" 类型为 [3]char
		bar2( "hi" ); // error. "hi" 类型为 [3]char != *[3]char
		bar3( "hi" ); // error. "hi" 类型为 [3]char != *char

		根据上述例子可以得出: 
			[N]T => *T // 无法自动转换, 只能显式的获取数组元素的地址进行转换
			*T => [N]T // 无法转换

			[]i32{1,2,3}: 类型为 [3]i32
			&[]i32{1,2,3}: 类型为 *[3]i32
			&([]i32{1,2,3}[0]): 类型为 *i32
			&([][2]i32{ []i32{1,2}, []i32{3,4} }[0]): 类型为 *[2]i32
			"hi": 类型为 [3]char

如何实现字符串:
	方案1:
		char == u8
		var c = 'a'; // char type
		var c = '天'; // 非法. 单引号中的内容必须是一个ASCII 字符. 不支持unicode字符
		var s = "天"; // char array. [N]char

		fn foo(s *char);
		foo("天气好");
	方案2:
		内置str类型, 常量字符串的默认类型为str. 字符串不以null结尾. 提供size.
			标准库提供str类型
			str{
				field:
					u64 size;
					char* data; // malloc
				method:
					Size,HasPrefix,HasSuffix,MatchRe,Split,SubStr,Fields,...
				implement constraint:
					Copy(深拷贝)
			}

		也可以显式指定类型为[N]char

		例子:
			var c = 'a'; // char type
			var c = '天'; // 非法. 单引号中的内容必须是一个ASCII 字符. 不支持unicode字符
			var s []char = "天"; // char array. [N]char
			var s = "天"; // str type.

		fn foo(s *char);
		foo("天气好");

方法如何实现?
	方法需要增加一个隐藏的指向obj的this指针. 这样就将方法转换为普通函数了.
	但是如何获取方法对应的obj指针? 
		p.GetId()
			AstNodeFnCall e1() // e1编译时需要返回e2的指针
				AstNodeAccessAttr  e2.e3
	还有一个问题: 函数指针如何实现? llvm会提供对fn的取地址操作么? 指向普通函数和方法的指针大小会不同, 如何处理?
		llvm支持将fn store到内存, 也支持从内存load fn. 因此对于普通函数, 可以直接以指针的方式处理.
		要不要支持指向方法的指针?

reference dereference rvalue lvalue:
	规则(有冲突):
		e.ltype = *(e.rtype)
		`&e`.rtype = e.ltype
		`*e`.rtype = (-*) e.rtype

		`&e`.ltype // 无效

		(-*)(*T) = T
		*((-*)T) = T

		// 假设 var id = init_expr;
		id.rtype = init_expr.rtype

		`[2]i32{1,2}`.rtype = [2]i32
		var array = [2]i32{1,2};
		array.rtype = `[2]i32{1,2}`.rtype = [2]i32

		// 假设e.ltype = *[N]T
		`e[idx]`.rtype = T

		// 假设e.ltype = *T
		`e[idx]`.rtype = T

	例子:
		var i=1;
		var j=1;
		var p = &i;
		var q = p;
		p = *q;
		*p = 100;
			1
				1.rtype = i32
			i
				i.rtype = 1.rtype = i32
				i.ltype = *(i.rtype) = *i32
			p
				p.rtype = `&i`.rtype = i.ltype = *i32
				p.ltype = *(p.rtype) = **i32
			q
				q.rtype = p.rtype = *i32
				q.ltype = *(q.rtype) = **i32
			*q
				`*q`.rtype = (-*) q.rtype = (-*) *i32 = i32
			*p
				`*p`.ltype = *( `*p`.rtype) = *( (-*) p.rtype ) = p.rtype = *i32

		var array = [2]i32{1,2};
		var p = &array;
		var q = &(array[0]);
		array[0] = 100;
		(*p)[0] = 100;
		q[0] = 100;
			[2]i32{1,2}
				`[2]i32{1,2}`.rtype = [2]i32
			array
				array.rtype = `[2]i32{1,2}`.rtype = [2]i32
				array.ltype = *(array.rtype) = *[2]i32
			&array
				`&array`.rtype = array.ltype = *[2]i32
			array[0]
				`array[0]`.rtype = i32
				`array[0]`.ltype = *(`array[0]`.rtype) = *i32
			&(array[0])
				`&(array[0])`.rtype = `array[0]`.ltype = *i32
			p
				p.rtype = `&array`.rtype = *[2]i32
			*p
				`*p`.rtype = (-*) p.rtype = (-*) *[2]i32 = [2]i32
				`*p`.ltype = *(`*p`.rtype) = *[2]i32
			(*p)[0]
				`(*p)[0]`.rtype = i32
				`(*p)[0]`.ltype = *( `(*p)[0]`.rtype ) = *i32
			q
				q.rtype = `&(array[0])`.rtype = `array[0]`.ltype = *i32
				q.ltype = *(q.rtype) = **i32
			q[0]
				`q[0]`.rtype = *i32
				// 按照上述规则推导出错误的结果. 这里ltype应该是*i32. 这说明规则隐含冲突
				`q[0]`.ltype = *( `q[0]`.rtype ) = **i32 
				
reference dereference rvalue lvalue:
	规则:
		e.ltype = *(e.rtype)
		`&e`.rtype = e.ltype
		`*e`.rtype = (-*) e.rtype

		`&e`.ltype // 无效

		(-*)(*T) = T
		*((-*)T) = T

		// 假设 var id = init_expr;
		id.rtype = init_expr.rtype

		`[2]i32{1,2}`.rtype = *[2]i32
		var array = [2]i32{1,2};
		array.rtype = `[2]i32{1,2}`.rtype = *[2]i32

		// 假设e.rtype = *[N]T
		`e[idx]`.rtype = T

		// 假设e.rtype = *T
		`e[idx]`.rtype = T

	例子:
		var i=1;
		var j=1;
		var p = &i;
		var q = p;
		p = *q;
		*p = 100;
			1
				1.rtype = i32
			i
				i.rtype = 1.rtype = i32
				i.ltype = *(i.rtype) = *i32
			p
				p.rtype = `&i`.rtype = i.ltype = *i32
				p.ltype = *(p.rtype) = **i32
			q
				q.rtype = p.rtype = *i32
				q.ltype = *(q.rtype) = **i32
			*q
				`*q`.rtype = (-*) q.rtype = (-*) *i32 = i32
			*p
				`*p`.ltype = *( `*p`.rtype) = *( (-*) p.rtype ) = p.rtype = *i32

		var array = [2]i32{1,2};
		var p = array;
		var q = &(array[0]);
		array[0] = 100;
		p[0] = 100;
		q[0] = 100;
			[2]i32{1,2}
				`[2]i32{1,2}`.rtype = *[2]i32
			array
				array.rtype = `[2]i32{1,2}`.rtype = *[2]i32
				array.ltype = *(array.rtype) = **[2]i32
			&array
				`&array`.rtype = array.ltype = **[2]i32
			array[0]
				`array[0]`.rtype = i32
				`array[0]`.ltype = *(`array[0]`.rtype) = *i32
			&(array[0])
				`&(array[0])`.rtype = `array[0]`.ltype = *i32
			p
				p.rtype = array.rtype = *[2]i32
			q
				q.rtype = `&(array[0])`.rtype = `array[0]`.ltype = *i32
				q.ltype = *(q.rtype) = **i32
			p[0]
				`p[0]`.rtype = i32
				`p[0]`.ltype = *( `p[0]`.rtype ) = *i32
			q[0]
				`q[0]`.rtype = i32
				`q[0]`.ltype = *( `q[0]`.rtype ) = *i32 

数组和指针这块还是没有理清楚:
	var array = [2]i32{1,2};
	var p_array = &array;
	var p_array_element = &(array[0]);

	array[0] 
		`array`在语法上, 类型是[2]i32, 内存大小为2*sizeof(i32).
		`array`在编译和执行阶段, 类型是*[2]i32, 内存大小是sizeof(*[2]i32)

	AstNodeAccessArrayElement的编译:
		array_expr [ index_expr ]
		array_expr需要编译得到lvalue
			情况1:
				var array = [2]i32{1,2};
				array[0]

				`array`是lvalue, 类型是*[2]i32
				然后使用GEP获取0号元素
			情况2:
				var array = [2]i32{1,2};
				var p = &array;
				(*p)[0]

				`p`是rvalue, 类型是*[2]i32
				`*p`是lvalue, 类型是*[2]i32
			情况3:
				var array = [2]i32{1,2};
				var p = &(array[0]);
				p[0]

				`p`是lvalue, 类型是**i32
