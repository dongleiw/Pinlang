1. 什么是泛型? 为什么需要泛型?
	泛型字面意思就是泛化的类型. 一般的逻辑(函数/方法)是和具体类型绑定的, 这种函数(方法)只能接受明确的类型. 但是一些逻辑可以作用于多种类型, 只要类型满足某些约束条件. 
	比如以下两个函数. 逻辑都是求两个参数的和. 
		fn sum(a int, b int) int{ return a+b; }
		fn sum(a float, b float) float{ return a+b; }

		这两个函数可以用以下伪码描述:
			泛型参数:
				T T是int or T是float
			函数体:
				fn sum(a T, b T) T{
					return a+b; 
				}

			其中T是泛型参数(简称为泛参), 泛型函数可以看作是一个接受类型作为参数的函数, 根据具体的参数来生成实际函数的过程称为泛型函数的实例化. 
		

	泛型的实现方式选择
		从上面例中中可以看出, 泛型的构建依赖于一个更基础的概念"对类型的约束", 也就是类型需要满足的条件. 泛型通过约束来限定可接受的类型集合
		那么如何描述"对类型的约束"哪? 不同语言选择了不同的方式.
			隐式声明约束:
				比如C++中的template, 无需显示定义约束条件. 所有约束由编译器自动推导. 坏处是编译耗时长, 错误提示不友好, 不够直观
				(C++20引入了concept, 是一种显式声明的方式) 
			显示定义约束, 隐式声明约束(duck type):
				比如Golang中的interface. 需要显式定义. 但是只要类型实现了interface的相关接口, 就会自动满足了interface的限定. 
				(Golang没有泛型, 这是一个不严谨的例子)
			显式定义约束, 显式声明约束:
				比如Rust中的trait. 需要显式定义约束(Rust中为类型的特性), 同时需要使用impl显式声明实现某个约束. 可以在定义时进行类型检测, 错误提示更友好, 比较直观
				我们选择这种方式
			
	泛型的符号选择
		<>
			fn sum<T Add<T,T>>(a T, b T) T{
				return a+b;
			}
			sum<int>(1,2);

		turborfish
			Add::<int,int>
			sum::<int>

		[] (目前是选择的这个)
			fn sum[T Add[T,T]](a T, b T) T{
				return a+b;
			}
			sum[int](1,2);

			数组下标访问则改为()
				var array = {1,2,3};
				array(0)
				array(1)
			


3. 泛型函数
	在约束的基础上, 就可以实现泛型函数了. 
	定义泛型函数:
		fn sum[T Add[T,T]] (a T, b T) T { return a+b; }

		
4. 将泛型函数和函数重载结合起来的一个方案
	当同时有函数重载, 泛型函数, 缺省参数的时候, candidate的选择规则比较复杂. 如果简单的选择"不支持函数重载", 可以解决问题, 但是也失去了"函数重载"带来的一些便利性
	方案要求: 
		* 避免复杂的选择candidate的规则, 更加直观, 实现简单
		* 尽可能整合泛型函数和函数重载的优秀的地方
	规则: 
		* 如果有多个参数个数相同的实现, 必须都是非泛型实现, 且参数类型不同
	方案缺陷:
		* 由于相同泛参可以有多个参数个数不同的实现. 这导致无法根据泛参来生成实际的函数. 
			fn foo{
				[T Stringify](a T){}				// A
				[T Printable](a T, b T){} 			// B
				[T Printable](a T, b T, c T){}		// C
				[T Printable](a T, b T, c T, d T){} // D
			}
			以上面函数定义为例, 仅仅根据`foo[int]`无法确定应该选择那个实现. 一般泛型函数都被理解为'参数为类型的元函数'. 但是对于这个方案来说, 这个理解是错的. 
			必须提供参数个数
			使用泛型函数的一些情况:
				- 函数调用
					var a = foo(1); // 可以自动推导
				- 函数赋值
					var a fn(int) = foo; // 无法自动推导, 必须显示提供类型信息
				- 参数传递
					fn callf( f fn(int,int));
					call(foo); // 可以自动推导
				- return函数
					fn returnf() fn(int,int){
						return f; // 可以自动推导
					}

	// 普通函数的简单定义
	fn foo(){}
	
	// 泛型函数的简单定义
	fn foo[T Add[T,T]](a T, b T){}
	
	fn foo{
		(a int){}
		(a str){}
	}
	fn foo{
		(a int){}
		(a str){}
		[T Stringify](a T){} // 有歧义. int/str可能满足Stringify的限制
	}
	fn foo{
		[T Stringify](a T){} 
		[T Printable](a T){} // 有歧义. 类型可能同时满足Stringify和Printable的限制
	}
	fn foo{
		[T Stringify](a T, b int){} 
		[T Printable](a T, b str){} // 没有歧义. 虽然类型可能同时满足Stringify和Printable的限制, 但是由于第二个参数类型不是泛型, 可以区分. 但是目前的规则下是不允许的
	}
	fn foo{
		[T Stringify](a T){} 
		[T Printable](a T, b T){} // 没有歧义, 参数个数不同, 可以区分. (如果支持缺省参数, 那就有歧义了)
	}
